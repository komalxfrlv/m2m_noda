generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id       String            @id @unique @default(uuid())
  name     String            @db.VarChar(99)
  UTC      Int               @default(5) @db.SmallInt
  users    User[]
  stations StationSettings[]
}

model User {
  id String @id @unique @default(uuid())

  name       String  @db.VarChar(255)
  surname    String  @db.VarChar(255)
  patronymic String  @db.VarChar(255)
  email      String  @unique
  phone      BigInt
  password   String
  verified   Boolean @default(false)

  status UserStatus
  client UserClient
  role   UserRole

  auto_updating Boolean @default(true)
  auto_paying   Boolean @default(true)

  get_push  Boolean @default(true)
  get_email Boolean @default(true)

  hash_rst       String? @db.VarChar(255)
  hash_vrf       String? @db.VarChar(255)
  remainingTries Int     @default(0)

  token String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metrics       Metric[]
  refreshTokens RefreshToken[]
  shelldues     Shelldue[]
  stations      Station[]
  userGroups    UserToUserGroups[]
  contracts     Contract[]
  EventsLog     EventLog[]
  rooms         Rooms[]

  cityId String
  city   City   @relation(fields: [cityId], references: [id])
}

model RefreshToken {
  id          String @id @unique @default(uuid())
  hashedToken String

  revoked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id     String @id @unique @default(uuid())
  number String @db.VarChar(255)

  stations Station[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DeviceType {
  id   String  @id @unique @default(uuid())
  name String  @db.VarChar(255)
  code String? @unique

  group DeviceTypesAtGroup[]
  frontView Json?
  iconId String?
  icon   Icon?   @relation(fields: [iconId], references: [id])
  category deviceCategory?
  sensors        Sensor[]
  stations       Station[]
  versions       Version[]
  defaultScripts DefaultScripts[]
}

model DeviceTypesAtGroup {
  groupId    String
  group      DeviceGroup @relation(fields: [groupId], references: [id])
  deviceId   String
  deviceType DeviceType  @relation(fields: [deviceId], references: [id])

  @@id([groupId, deviceId])
}

model Version {
  id          String @id @unique @default(uuid())
  fileUrl     String
  description String
  version     String @db.VarChar(255)
  servFileUrl String @default("")

  sensors  SensorSettings[]
  stations StationSettings[]

  deviceId  String
  device    DeviceType @relation(fields: [deviceId], references: [id])
  createdAt DateTime   @default(now())
}

model Station {
  id        String  @id @unique @default(uuid())
  mac       String? @db.VarChar(99)
  gatewayId String? @db.VarChar(99)

  settings StationSettings?

  shelldues ShellduesOnStations[]
  sensors   Sensor[]
  EventsLog EventLog[]

  deviceId   String
  device     DeviceType @relation(fields: [deviceId], references: [id])
  contractId String?
  contract   Contract?  @relation(fields: [contractId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StationSettings {
  id   String @id @unique @default(uuid())
  name String @db.VarChar(255)

  options Json?

  stationId String  @unique
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  versionId String
  version   Version @relation(fields: [versionId], references: [id])
  cityId    String?
  city      City?   @relation(fields: [cityId], references: [id])
  roomsId   String?
  room      Rooms?  @relation(fields: [roomsId], references: [id], onDelete: Cascade)
}

model Sensor {
  id        String  @id @unique @default(uuid())
  mac       String  @db.VarChar(99)
  elementId String? @db.VarChar(99)

  settings SensorSettings?
  charge   Int?
  uptime   BigInt?

  EventsLog EventLog[]
  data      Data[]

  deviceId  String
  device    DeviceType @relation(fields: [deviceId], references: [id])
  stationId String
  station   Station    @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model SensorSettings {
  id   String @id @unique @default(uuid())
  name String @db.VarChar(255)

  sleep BigInt? @default(10)
  alert Boolean @default(false)
  lost  Boolean @default(false)

  triggerMin Float?
  triggerMax Float?
  schedule   Json?
  options    Json?

  pushStart DateTime? @db.Time(6)
  pushEnd   DateTime? @db.Time(6)

  sensorId  String  @unique
  sensor    Sensor  @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  versionId String
  version   Version @relation(fields: [versionId], references: [id])
  roomsId   String?
  room      Rooms?  @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  iconId    String?
  icon      Icon?   @relation(fields: [iconId], references: [id])
}

model Data {
  id String @id @unique @default(uuid())

  value Json

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  sensorId  String
  sensor    Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  eventLog  EventLog[]
}

model Activity {
  id     String   @id @unique @default(uuid())
  name   String
  metric Metric[]
}

model Metric {
  id String @id @unique @default(uuid())

  datetime DateTime @default(now())

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserGroups {
  id         String             @id @unique @default(uuid())
  name       String
  pushGroups UserToUserGroups[]
}

model UserToUserGroups {
  userGroupId String
  userGroup   UserGroups @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  @@id([userGroupId, userId])
}

model Shelldue {
  id     String  @id @unique @default(uuid())
  active Boolean
  name   String

  hash String?

  shelldueScript Json
  shelldueType   ShelldueType          @default(condition)
  executing      Boolean               @default(false)
  deviceTypes    String[]
  runtimeStart   DateTime?             @db.Time()
  runtimeEnd     DateTime?             @db.Time()
  stations       ShellduesOnStations[]

  userId   String
  user     User       @relation(fields: [userId], references: [id])
  eventLog EventLog[]
}

model ShellduesOnStations {
  id String @id @unique @default(uuid())

  shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  shelldueId String

  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId String
}

model PushMessage {
  id        String @id @unique @default(uuid())
  title     String
  body      String
  condition String
  code      Int    @unique
}

model EventCode {
  id          String     @id @unique @default(uuid())
  description String
  code        Int        @unique
  EventLog    EventLog[]
}

model EventLog {
  id String @id @unique @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sensorId   String?
  sensor     Sensor?   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  stationId  String?
  station    Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  dataId     String?
  data       Data?     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  shelldueId String?
  shelldue   Shelldue? @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  codeId     String
  code       EventCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}

model Rooms {
  id String @id @unique @default(uuid())

  name String @db.VarChar(255)

  sensors  SensorSettings[]
  stations StationSettings[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeviceGroup {
  id   String @id @unique @default(uuid())
  name String

  deviceType DeviceTypesAtGroup[]

  iconId String?
  icon   Icon?   @relation(fields: [iconId], references: [id])
}

model DefaultScripts {
  id     String @id @unique @default(uuid())
  script Json

  description String?

  deviceId String
  device   DeviceType @relation(fields: [deviceId], references: [id])
}

model Icon {
  id   String @id @unique @default(uuid())
  name String
  url  String

  deviceGroup DeviceGroup[]
  deviceType  DeviceType[]
  sensors     SensorSettings[]
}

enum UserStatus {
  active
  inactive
}

enum UserClient {
  bussiness
  person
  local
}

enum UserRole {
  administrator
  developer
  manager
  support
  user
}

enum ShelldueType {
  time
  condition
  tip
}

enum deviceCategory{
  State 
  Action
  K_Telecom
}
