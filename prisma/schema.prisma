generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id       String            @id @unique @default(uuid())
  name     String            @db.VarChar(99)
  UTC      Int               @default(5) @db.SmallInt
  stations StationSettings[]
  users    User[]
}

model User {
  id             String             @id @unique @default(uuid())
  name           String             @db.VarChar(255)
  surname        String             @db.VarChar(255)
  patronymic     String             @db.VarChar(255)
  email          String             @unique
  phone          BigInt
  password       String
  verified       Boolean            @default(false)
  status         UserStatus
  client         UserClient
  role           UserRole
  auto_updating  Boolean            @default(true)
  auto_paying    Boolean            @default(true)
  get_push       Boolean            @default(true)
  get_email      Boolean            @default(true)
  hash_rst       String?            @db.VarChar(255)
  hash_vrf       String?            @db.VarChar(255)
  remainingTries Int                @default(0)
  token          String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  cityId         String
  contracts      Contract[]
  EventsLog      EventLog[]
  icons          Icon[]
  metrics        Metric[]
  refreshTokens  RefreshToken[]
  rooms          Rooms[]
  shelldues      Shelldue[]
  stations       Station[]
  city           City               @relation(fields: [cityId], references: [id])
  userGroups     UserToUserGroups[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id       String    @id @unique @default(uuid())
  number   String    @db.VarChar(255)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stations Station[]
}

model DeviceType {
  id                          String                        @id @unique @default(uuid())
  name                        String                        @db.VarChar(255)
  code                        String?                       @unique
  iconId                      String?
  category                    deviceCategory?
  frontView                   Json?
  commands                    Json?
  icon                        Icon?                         @relation(fields: [iconId], references: [id])
  deviceTypesAtDefaultScripts DeviceTypesAtDefaultScripts[]
  group                       DeviceTypesAtGroup[]
  sensors                     Sensor[]
  stations                    Station[]
  versions                    Version[]
}

model DeviceTypesAtGroup {
  groupId    String
  deviceId   String
  deviceType DeviceType  @relation(fields: [deviceId], references: [id])
  group      DeviceGroup @relation(fields: [groupId], references: [id])

  @@id([groupId, deviceId])
}

model Version {
  id          String            @id @unique @default(uuid())
  fileUrl     String
  description String
  version     String            @db.VarChar(255)
  servFileUrl String            @default("")
  deviceId    String
  createdAt   DateTime          @default(now())
  sensors     SensorSettings[]
  stations    StationSettings[]
  device      DeviceType        @relation(fields: [deviceId], references: [id])
}

model Station {
  id         String                @id @unique @default(uuid())
  mac        String?               @db.VarChar(99)
  gatewayId  String?               @db.VarChar(99)
  deviceId   String
  contractId String?
  userId     String
  EventsLog  EventLog[]
  sensors    Sensor[]
  shelldues  ShellduesOnStations[]
  contract   Contract?             @relation(fields: [contractId], references: [id])
  device     DeviceType            @relation(fields: [deviceId], references: [id])
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings   StationSettings?
}

model StationSettings {
  id        String  @id @unique @default(uuid())
  name      String  @db.VarChar(255)
  options   Json?
  stationId String  @unique
  versionId String
  cityId    String?
  roomsId   String?
  city      City?   @relation(fields: [cityId], references: [id])
  room      Rooms?  @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  version   Version @relation(fields: [versionId], references: [id])
}

model Sensor {
  id        String          @id @unique @default(uuid())
  mac       String          @db.VarChar(99)
  elementId String?         @db.VarChar(99)
  charge    Int?
  uptime    BigInt?
  deviceId  String
  stationId String
  data      Data[]
  EventsLog EventLog[]
  device    DeviceType      @relation(fields: [deviceId], references: [id])
  station   Station         @relation(fields: [stationId], references: [id], onDelete: Cascade)
  settings  SensorSettings?
}

model SensorSettings {
  id         String    @id @unique @default(uuid())
  name       String    @db.VarChar(255)
  sleep      BigInt?   @default(10)
  alert      Boolean   @default(false)
  lost       Boolean   @default(false)
  triggerMin Float?
  triggerMax Float?
  schedule   Json?
  options    Json?
  pushStart  DateTime? @db.Time(6)
  pushEnd    DateTime? @db.Time(6)
  sensorId   String    @unique
  versionId  String
  roomsId    String?
  iconId     String?
  icon       Icon?     @relation(fields: [iconId], references: [id])
  room       Rooms?    @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  sensor     Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  version    Version   @relation(fields: [versionId], references: [id])
}

model Data {
  id            String     @id @unique @default(uuid())
  value         Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  sensorId      String
  createdAtDate DateTime   @default(now()) @db.Date
  sensor        Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  eventLog      EventLog[]
}

model Activity {
  id     String   @id @unique @default(uuid())
  name   String
  metric Metric[]
}

model Metric {
  id         String   @id @unique @default(uuid())
  datetime   DateTime @default(now())
  activityId String
  userId     String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserGroups {
  id         String             @id @unique @default(uuid())
  name       String
  pushGroups UserToUserGroups[]
}

model UserToUserGroups {
  userGroupId String
  userId      String
  userGroup   UserGroups @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])

  @@id([userGroupId, userId])
}

model Shelldue {
  id                 String                @id @unique @default(uuid())
  active             Boolean
  name               String
  hash               String?
  shelldueScript     Json
  deviceTypes        String[]
  userId             String
  executing          Boolean               @default(false)
  shelldueType       ShelldueType          @default(condition)
  runtimeEnd         DateTime?             @db.Time(6)
  runtimeStart       DateTime?             @db.Time(6)
  success            Boolean[]
  lastSuccess        Boolean[]
  duration           BigInt?
  stage              Int                   @default(0)
  activeDays         Int[]
  eventLog           EventLog[]
  user               User                  @relation(fields: [userId], references: [id])
  ShellduesChainLink ShellduesChainLink[]
  stations           ShellduesOnStations[]
}

model ShellduesChainLink {
  id         String   @id @unique @default(uuid())
  name       String
  shelldueId String
  number     Int
  action     Json
  shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
}

model ShellduesOnStations {
  id         String   @id @unique @default(uuid())
  shelldueId String
  stationId  String
  shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model PushMessage {
  id        String @id @unique @default(uuid())
  title     String
  body      String
  condition String
  code      Int    @unique
}

model EventCode {
  id          String     @id @unique @default(uuid())
  description String
  code        Int        @unique
  EventLog    EventLog[]
}

model EventLog {
  id         String    @id @unique @default(uuid())
  userId     String
  sensorId   String?
  stationId  String?
  dataId     String?
  codeId     String
  shelldueId String?
  createdAt  DateTime  @default(now())
  message    String?   @db.VarChar(4096)
  code       EventCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  data       Data?     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  sensor     Sensor?   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  shelldue   Shelldue? @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  station    Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rooms {
  id        String            @id @unique @default(uuid())
  name      String            @db.VarChar(255)
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  sensors   SensorSettings[]
  stations  StationSettings[]
}

model DeviceGroup {
  id         String               @id @unique @default(uuid())
  name       String
  iconId     String?
  icon       Icon?                @relation(fields: [iconId], references: [id])
  deviceType DeviceTypesAtGroup[]
}

model DefaultScripts {
  id                         String                        @id @unique @default(uuid())
  script                     Json
  description                String?
  deviceTypesAtDefaultScript DeviceTypesAtDefaultScripts[]
}

model DeviceTypesAtDefaultScripts {
  id              String         @id @unique @default(uuid())
  deviceTypeId    String
  defaultScriptId String
  defaultScript   DefaultScripts @relation(fields: [defaultScriptId], references: [id])
  deviceType      DeviceType     @relation(fields: [deviceTypeId], references: [id])
}

model Icon {
  id          String           @id @unique @default(uuid())
  name        String
  url         String
  userId      String?
  deviceGroup DeviceGroup[]
  deviceType  DeviceType[]
  user        User?            @relation(fields: [userId], references: [id])
  sensors     SensorSettings[]
}

enum UserStatus {
  active
  inactive
}

enum UserClient {
  bussiness
  person
  local
}

enum UserRole {
  administrator
  developer
  manager
  support
  user
}

enum ShelldueType {
  time
  condition
  tip
}

enum deviceCategory {
  State
  Action
  K_Telecom
  Value
  Teremok
  SmartBulb
  Thermostat
}
